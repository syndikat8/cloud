{"version":3,"sources":["components/Message/Message.module.css","components/Qualities/Qualities.module.css","components/MyName/MyName.module.css","Container.module.css","components/Form/Form.module.css","components/Message/Message.jsx","components/MyName/MyName.jsx","components/Qualities/Qualities.jsx","components/Form/Button/Button.jsx","components/Form/Input/Input.jsx","components/Form/Span/Span.jsx","components/Form/InputIN/InputIN.jsx","components/Form/Form.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Message","className","styles","message","time","MyName","myName","Qualities","props","newNameQualities","nameQualities","map","mq","index","pain","key","id","qualitie","qualities","Button","onClick","this","click","React","Component","Input","ref","newMessageText","type","Span","spanNumber","InputIN","newName","Form","createRef","state","addClickHandler","text","current","value","addNewName","setState","names","form","App","container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,KAAO,wB,gBCA5DD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,KAAO,0B,kBCAlED,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,UAAY,+B,gBCA9BD,EAAOC,QAAU,CAAC,KAAO,qB,wJCkBVC,EAdC,WAEd,OACE,yBAAKC,UAAWC,IAAOC,SACrB,4CACA,qWAEL,yBAAKF,UAAWC,IAAOE,MAAvB,c,iBCEcC,EATA,WAEb,OACE,yBAAKJ,UAAWC,IAAOI,QACrB,8C,iCCeSC,EAnBG,SAACC,GAEjB,IACIC,EADcD,EAAME,cACWC,KAAK,SAACC,EAAGC,GAAJ,OAAwB,IAAVA,EAAa,wBAAIZ,UAAWC,IAAOY,KAAMC,IAAKH,EAAGI,IAApC,IAA0CJ,EAAGK,SAA7C,KAA8D,wBAAIF,IAAKH,EAAGI,IAAZ,IAAkBJ,EAAGK,SAArB,QASjI,OACE,yBAAKhB,UAAWC,IAAOgB,WACrB,4BAAKT,K,4DCNIU,E,iLAJX,OAAO,4BAAQC,QAASC,KAAKb,MAAMc,OAA5B,Y,GALYC,IAAMC,WCSdC,E,iLAJX,OAAO,2BAAOC,IAAKL,KAAKb,MAAMmB,eAAgBC,KAAK,a,GALjCL,IAAMC,WCSbK,E,iLAJX,OAAO,8BAAOR,KAAKb,MAAMsB,gB,GALRP,IAAMC,WCQZO,E,iLAJX,OAAO,2BAAIV,KAAKb,MAAMwB,a,GAJFT,IAAMC,WC4CfS,E,2MArCbN,eAAiBJ,IAAMW,Y,EAEvBC,MAAQ,CACNL,WAAY,GACZE,QAAS,I,EAGXI,gBAAkB,WAChB,IAAIC,EAAO,EAAKV,eAAeW,QAAQC,MACvC,EAAKZ,eAAeW,QAAQC,MAAQ,GACpC,EAAKC,WAAL,+CAA0BH,EAA1B,MACF,EAAKI,SAAS,CACZX,WAAY,EAAKK,MAAML,WAAa,K,EAKtCU,WAAa,SAACR,GACZ,IAAIU,EAAK,sBAAO,EAAKP,MAAMH,SAAlB,CAA2BA,IACpC,EAAKS,SAAS,CACZT,QAASU,K,wEAMX,OACE,yBAAKzC,UAAWC,IAAOyC,MACrB,kBAAC,EAAD,CAAMb,WAAYT,KAAKc,MAAML,aAC7B,kBAAC,EAAD,CAAOH,eAAgBN,KAAKM,iBAC5B,kBAAC,EAAD,CAAQL,MAAOD,KAAKe,kBACpB,kBAAC,EAAD,CAASJ,QAASX,KAAKc,MAAMH,e,GAlChBT,IAAMC,WCmBZoB,EAnBH,WAMV,OACE,yBAAK3C,UAAU,OACb,yBAAKA,UAAWC,IAAO2C,WACrB,kBAAC,EAAD,MACD,kBAAC,EAAD,CAAWnC,cATI,CAClB,CAACO,SAAU,WAAYD,GAAI,KAC3B,CAACC,SAAU,YAAaD,GAAI,KAC5B,CAACC,SAAU,iBAAaD,GAAI,QAOxB,kBAAC,EAAD,MACA,kBAAC,EAAD,SCRY8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM3D,c","file":"static/js/main.795e7624.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1foUp\",\"time\":\"Message_time__wkBcv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"qualities\":\"Qualities_qualities__3B8NI\",\"pain\":\"Qualities_pain__3p71r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myName\":\"MyName_myName__3pLq3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__Ni1xE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__2-cwd\"};","import React from 'react';\nimport styles from './Message.module.css';\n\n\n\nconst Message = () => {\n\n  return  (\n    <div className={styles.message}>\n      <h6>Dima Matusik</h6>\n      <span>Impeditmolestiaequamquoundevoluptateuamquoquamquoundevoluptatequamquoundevoluptate quam quo unde voluptate quam quo unde voluptate unde voluptate quam quo unde voluptate quam quo unde voluptate! Autem consequatur deserunt ducimus eaque, libero minima natus? Deserunt, doloremque ea et exercitationem nesciunt numquam vitae?\n      </span>\n <div className={styles.time}>\n   04:19 PM\n </div>\n    </div>\n  )\n};\n\nexport default Message;","import React from 'react';\nimport styles from './MyName.module.css';\n\n\n\nconst MyName = () => {\n\n  return  (\n    <div className={styles.myName}>\n      <h3>Dima matusik</h3>\n    </div>\n  )\n};\n\nexport default MyName;","import React from 'react';\nimport styles from './Qualities.module.css';\n\n\n\nconst Qualities = (props) => {\n\n  let myQualities = props.nameQualities;\n  let newNameQualities = myQualities.map( (mq,index) => index === 1? <li className={styles.pain} key={mq.id}> {mq.qualitie} </li>: <li key={mq.id}> {mq.qualitie} </li>);\n      // if(index === 1) {\n      //  return <li className={styles.pain} key={mq.id}> {mq.qualitie} </li>;\n      // } else {\n      //   return  <li key={mq.id}> {mq.qualitie} </li>;\n      //   }\n\n\n\n  return  (\n    <div className={styles.qualities}>\n      <ul>{newNameQualities}</ul>\n    </div>\n  )\n};\n\nexport default Qualities;","import React from 'react';\n\n\n\nclass Button  extends  React.Component{\n\n\n\n  render() {\n    return <button onClick={this.props.click}>send</button>\n  }\n}\n\nexport default Button;","import React from 'react';\n\n\n\nclass Input  extends  React.Component{\n\n\n\n  render() {\n    return <input ref={this.props.newMessageText} type=\"text\"/>\n  }\n}\n\nexport default Input;","import React from 'react';\n\n\n\nclass Span  extends  React.Component{\n\n\n\n  render() {\n    return <span>{this.props.spanNumber}</span>\n  }\n}\n\nexport default Span;","import React from 'react';\n\n\n\nclass InputIN  extends  React.Component{\n\n\n  render() {\n    return <p>{this.props.newName}</p>\n  }\n}\n\nexport default InputIN;","import React from 'react';\nimport styles from './Form.module.css';\nimport Button from \"./Button/Button\";\nimport Input from \"./Input/Input\";\nimport Span from \"./Span/Span\";\nimport InputIN from \"./InputIN/InputIN\";\n\n\nclass Form  extends  React.Component{\n\n\n  newMessageText = React.createRef();\n\n  state = {\n    spanNumber: 10,\n    newName: \"\",\n  };\n\n  addClickHandler = () => {\n    let text = this.newMessageText.current.value;\n    this.newMessageText.current.value = \"\";\n    this.addNewName(`Привет ${text} `);\n  this.setState({\n    spanNumber: this.state.spanNumber + 1,\n  });\n  };\n\n\n  addNewName = (newName) => {\n    let names = [...this.state.newName, newName];\n    this.setState({\n      newName: names\n    })\n  };\n\n\n  render() {\n    return (\n      <div className={styles.form}>\n        <Span spanNumber={this.state.spanNumber} />\n        <Input newMessageText={this.newMessageText}/>\n        <Button click={this.addClickHandler}/>\n        <InputIN newName={this.state.newName}/>\n      </div>\n    )\n  }\n}\n\nexport default Form;","import React from 'react';\nimport Message from \"./components/Message/Message\";\nimport MyName from \"./components/MyName/MyName\";\nimport styles from \"./Container.module.css\";\nimport Qualities from \"./components/Qualities/Qualities\";\nimport Form from \"./components/Form/Form\";\n\n\nconst App = () => {\n  let nameQualities = [\n    {qualitie: \"Punctual\", id: \"1\"},\n    {qualitie: \"Sportsman\", id: \"2\"},\n    {qualitie: \"Сonfident\", id: \"3\"}\n  ];\n  return (\n    <div className=\"App\">\n      <div className={styles.container}>\n        <MyName/>\n       <Qualities nameQualities={nameQualities} />\n        <Message/>\n        <Form/>\n      </div>\n    </div>\n  );\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" Message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}